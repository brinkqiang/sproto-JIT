// the test hello world JIT FOR X64

|.arch x64
|.actionlist actions

|.globals SPROTO_CODE_
static void* labels[SPROTO_CODE__MAX];

// call a function with a arg
|.macro callp, addr
| mov64  rax, (uintptr_t)addr
| call   rax
|.endmacro


// jit argument register
|.define ST, rdi
|.define DECODE_DATA, rsi
|.define DECODE_SIZE, rdx
|.define DECODE_CB,   rcx
|.define DECODE_UD,   r8

|.define ENCODE_DATA, rsi
|.define ENCODE_SIZE, rdx
|.define ENCODE_CB,   rcx
|.define ENCODE_UD,   r8


|.macro _pre
| push rbp
| push rbx
| push rdi
| push rsi
| push r12
| push r13
| push r14
| push r15
| sub rsp, sizeof(union tmp_u)
|.endmacro

|.macro _ret
|->run_done:
| add rsp, sizeof(union tmp_u)
| pop r15
| pop r14
| pop r13
| pop r12
| pop rsi
| pop rdi
| pop rbx
| pop rbp
| ret
|.endmacro

|.macro _return, value
| mov rax, value
| jmp ->run_done 
|.endmacro


// argement rdi, rsi, rdx, rcx, r8, r9, rax
|.macro _call_cb, R_cb, ud, tagname, type, index, st, value, length
| mov r9, value
| push rdi
| push rsi
| push rdx
| push rcx
| push r8 
|
| push length
| mov rax, R_cb
| mov rdi, ud
| mov64 rsi, (uintptr_t)tagname
| mov64 r8, (uintptr_t)st
| mov rdx, type
| mov rcx, index
| call rax
|
| add rsp, 8 // pop length
| pop r8
| pop rcx
| pop rdx
| pop rsi
| pop rdi
|.endmacro

|.type HEADER, uint8_t,   ENCODE_DATA
|.type DATA,   uint8_t,   r14
|.type RECORD, uint8_t,   r15


|.macro _fill_size, data, sz, R_out
| mov eax, sz
| test eax, eax
| js >4
| jz >5
| mov eax, sz
| mov data[0], al
| shr eax, 8
| mov data[1], al
| shr eax, 8
| mov data[2], al
| shr eax, 8
| mov data[3], al
| mov R_out, sz
| add R_out, SIZEOF_LENGTH
| jmp >3
|
|5:
| mov R_out, 0
| jmp >3
|4:
| mov R_out, -1
|3:
|.endmacro


|.macro _encode_uint64, u64, data, size, R_out
| cmp size, SIZEOF_LENGTH + sizeof(uint64_t)
| jl >1
| mov rax, u64
| mov data[4], al
| shr rax, 8
| mov data[5], al
| shr rax, 8
| mov data[6], al
| shr rax, 8
| mov data[7], al
| shr rax, 8
| mov data[8], al
| shr rax, 8
| mov data[9], al
| shr rax, 8
| mov data[10], al
| shr rax, 8
| mov data[11], al
| shr rax, 8
| _fill_size data, sizeof(uint64_t), R_out
| jmp >2
|
|1:
| mov R_out, -1
|2:
|.endmacro

|.macro _encode_integer, u32, data, size, R_out
| cmp size, SIZEOF_LENGTH + sizeof(uint32_t)
| jl >1 
| mov eax, u32
| mov data[4], al
| shr eax, 8
| mov data[5], al
| shr eax, 8
| mov data[6], al
| shr eax, 8
| mov data[7], al
| _fill_size data, sizeof(uint32_t), R_out
| jmp >2
|
|1:
| mov R_out, -1
|2:
|.endmacro


|.macro _encode_buffer, cb, ud, sproto_type, name, st, data, size, R_out
| cmp size, SIZEOF_LENGTH
| jl >1
| add data, SIZEOF_LENGTH
| sub size, SIZEOF_LENGTH
| _call_cb cb, ud, name, sproto_type, 0, st,  data, size
| mov R_out, eax
| sub data, SIZEOF_LENGTH
| add size, SIZEOF_LENGTH
| _fill_size data, R_out, R_out
| jmp >2
| 
|1:
| mov R_out, -1
|2:
|.endmacro

// not jit
|.macro _encode_integer_array, cb, ud, f, buffer, size
| push rdi
| push rsi
| push rdx
| push rcx
| push r8
|
| mov rdi, cb
| mov rsi, ud
| mov64 rdx, (uintptr_t)f
| mov rcx, buffer
| mov r8, size
| mov64 rax, (uintptr_t)encode_integer_array
|
| call rax
|
| pop r8
| pop rcx
| pop rdx
| pop rsi
| pop rdi
|.endmacro

// toward, eax is return value
|.macro _toword, p
| xor rax, rax
| mov al, p[0]
| mov ah, p[1]
|.endmacro

// todword, eax is return value
|.macro _todword, p
| xor rax, rax
| mov al, p[2]
| mov ah, p[3]
| shl eax, 16
| mov al, p[0]
| mov ah, p[1]
|.endmacro


|.type TMP_U_P, union tmp_u, rsp
|.type JIT_P, struct sproto_jit, r9

|.macro _gt_u32, R_out
| mov R_out, TMP_U_P->u32
|.endmacro

|.macro _gt_u64, R_out
| mov   R_out, TMP_U_P->u64
|.endmacro

|.macro _st_u64, v
| mov TMP_U_P->u64, v
|.endmacro

|.macro _st_u32, v
| mov TMP_U_P->u32, v
|.endmacro

|.macro _st_low, v32
| mov TMP_U_P->v64_op.low, v32
|.endmacro

|.macro _st_hi, v32
| mov TMP_U_P->v64_op.hi, v32
|.endmacro


// tmp32 is parameter
|.macro _expand64
| xor rax, rax
| mov eax, tmp32
| cmp tmp32, 0
| jge >5
| xor rax, rax
| not rax
| shl rax, 32
| or rax, tmp64
|5:
|.endmacro

|.type   stream,      uint8_t,  DECODE_DATA
|.type   currentdata, uint8_t,  r11
|.type   tmp64,       uint8_t,  rdi
|.define tmp32,                 edi
|.define tmp8,                  r7b

static int
_gen_decode_array(struct field* f, unsigned int label_return_error){
  | mov tmp64, currentdata
  | _todword tmp64
  | add currentdata, SIZEOF_LENGTH
  
  int size_u = sizeof(union tmp_u);
  assert(size_u == 8);

  assert(sizeof(uint32_t) == 4);
  assert(sizeof(uint64_t) == 8);
  dasm_growpc(Dst, maxpc+=2);

  unsigned int label_decode_array_end = maxpc -1;

  int type = f->type & ~SPROTO_TARRAY;
  switch(type){
    case SPROTO_TINTEGER: {
      | cmp rax, 1
      | jl =>(label_return_error)
      | mov tmp8, currentdata[0] // len
      | inc currentdata
      | dec rax  // sz
      | cmp tmp8, sizeof(uint32_t)
      | jne >1
      |
        | mov rbp, rax
        | and rax, 3
        | jnz =>(label_return_error)
        | shr rbp, 2
        | xor rbx, rbx
        | sub currentdata, sizeof(uint32_t)
        |2:
        | add currentdata, sizeof(uint32_t)
        | mov tmp64, currentdata
        | _todword tmp64
        | mov tmp32, eax
        | _expand64
        | mov tmp64, rax
        | _st_u64, tmp64
        | mov tmp64, currentdata    // back currentdata
        |
        | inc rbx
        | _call_cb DECODE_CB, DECODE_UD, f->name, SPROTO_TINTEGER, rbx, NULL, TMP_U_P, size_u
        | mov currentdata, tmp64
        | cmp rbp, rbx
        | jg <2
        | jmp =>(label_decode_array_end)
      |
      |1:
      | cmp tmp8, sizeof(uint64_t)
      | jne =>(label_return_error)
      | 
        | mov rbp, rax
        | and rax, 7
        | jnz =>(label_return_error)
        | shr rbp, 3
        | xor rbx, rbx
        | sub currentdata, sizeof(uint64_t)
        |3:
        | add currentdata, sizeof(uint64_t)
        | mov tmp64, currentdata
        | _todword tmp64
        | _st_low rax
        | add tmp64, sizeof(uint32_t)
        | _todword tmp64
        | _st_hi rax
        | mov tmp64, currentdata    // back currentdata
        |
        | inc rbx
        | _call_cb DECODE_CB, DECODE_UD, f->name, SPROTO_TINTEGER, rbx, NULL, TMP_U_P, size_u
        | mov currentdata, tmp64
        | cmp rbp, rbx
        | jg <3
        | jmp =>(label_decode_array_end)
      |

    }break;
    
    case SPROTO_TBOOLEAN: {
      | mov rbp, rax
      | xor rbx, rbx
      | mov tmp64, currentdata
      |
      |4:
      | xor rax, rax
      | mov al, tmp64[0]
      | _st_u32 rax
      |
      | inc rbx
      | _call_cb DECODE_CB, DECODE_UD, f->name, SPROTO_TBOOLEAN, rbx, NULL, TMP_U_P, size_u
      | inc tmp64
      | cmp rbp, rbx
      | jg <4
      | jmp =>(label_decode_array_end)
    }break;

    case SPROTO_TSTRING:
    case SPROTO_TSTRUCT: {
      | mov rbp, rax
      | mov rbx, 1
      | mov tmp64, currentdata
      |
      |5:
      | cmp rbp, 0
      | jle =>(label_decode_array_end)
      | cmp rbp, SIZEOF_LENGTH
      | jl =>(label_return_error)
      | _todword tmp64
      | add tmp64, SIZEOF_LENGTH
      | sub rbp, SIZEOF_LENGTH
      |
      | cmp rax, rbp
      | jg =>(label_return_error)
      |
      | sub rbp, rax
      | mov currentdata, tmp64
      | add tmp64, rax
      | _call_cb DECODE_CB, DECODE_UD, f->name, type, rbx, f->st, currentdata, rax
      | test eax, eax
      | jnz =>(label_return_error)
      | inc rbx
      | jmp <5

    }break;

    default:
      return 0;
  }

  |=>(label_decode_array_end):
  |
  return 1;
}

static int 
_gen_decode_type(struct sproto_type* st){
  dasm_growpc(Dst, maxpc+=2);
  unsigned int label_return_error = maxpc-1;
  unsigned int label_end = maxpc-2;

  int size_u = sizeof(union tmp_u);
  assert(size_u == 8);

  assert(SIZEOF_FIELD==2); // for optimize

  |.define size, edx // DECODE_SIZE u32
  |.type datastream, uint8_t, r15
  |.define d_value64, r10
  |.define d_value, r10d
  |.define d_tag,   r14d
  |.define fn,      r12d
  |.define d_index, r13d

  |.macro _next_tag
  |1:
  | cmp d_index, fn
  | jge =>(label_end)
  | inc d_tag
  | xor tmp64, tmp64
  | mov tmp32, d_index
  | shl tmp32, 1
  | add tmp64, stream
  | _toword, tmp64
  | mov d_value, eax
  | and eax, 1
  | jp >2
  |
    | mov eax, d_value
    | shr eax, 1
    | add d_tag, eax 
    | inc d_index
    | jmp <1
  |
  |2:
  | inc d_index
  | shr d_value, 1
  | dec d_value
  |.endmacro

  |
  | cmp DECODE_SIZE, SIZEOF_HEADER
  |
    | jl =>(label_return_error)
  |
  | _toword, stream  // eax is fn
  | add stream, SIZEOF_HEADER
  | sub size, SIZEOF_HEADER
  | shl eax, 1 // fn * SIZEOF_FIELD
  | cmp size, eax
  |
    | jl =>(label_return_error)
  |
  | mov datastream, stream
  | add datastream, rax
  | sub size, eax
  | shr eax, 1
  |
  | mov fn, eax
  | xor d_value64, d_value64
  | xor d_index, d_index
  | xor r10, r10
  | mov d_tag, -1

  |
  | _next_tag
  |

  int i;
  for(i=0; i<st->n; i++){
    struct field *f = &st->f[i];
    int _tag = f->tag;
    int type = f->type;

    dasm_growpc(Dst, maxpc+=9);

    | cmp d_tag, _tag
    | jne =>(maxpc-1)
    |
    | mov currentdata, datastream
    | cmp d_value, 0
    | jge =>(maxpc-2)
    | 
      | cmp size, SIZEOF_LENGTH
      | jl =>(label_return_error)
      | mov tmp64, datastream
      | _todword, tmp64
      | add eax, SIZEOF_LENGTH
      | cmp size, eax
      | jl =>(label_return_error)
      | add datastream, rax
      | sub size, eax
    |
    |=>(maxpc-2):
    |

    if(type & SPROTO_TARRAY){
      int success = _gen_decode_array(f, label_return_error);
      if(! success) return success;
    } else {
      switch(type){
        case SPROTO_TINTEGER:
        case SPROTO_TBOOLEAN: {
          | test d_value, d_value
          | js =>(maxpc-3)
          | _st_u64 d_value64
          | _call_cb DECODE_CB,  DECODE_UD, f->name, f->type, 0, NULL, TMP_U_P, size_u
          | jmp =>(maxpc-4) 
          |
          |=>(maxpc-3):
          | mov tmp64, currentdata
          | _todword, tmp64
          | cmp eax, sizeof(uint32_t)
          |
            | jne >1
          |
          | add tmp64, SIZEOF_LENGTH
          | _todword, tmp64
          | mov tmp32, eax
          | _expand64
          | mov tmp64, rax
          | _st_u64, tmp64
          | _call_cb DECODE_CB, DECODE_UD, f->name, SPROTO_TINTEGER, 0, NULL, TMP_U_P, size_u
          | jmp =>(maxpc-4)
          |1:
          | cmp eax, sizeof(uint64_t)
          |
            | jne =>(label_return_error)
          |
          | mov tmp64, currentdata
          | add tmp64, SIZEOF_LENGTH
          | _todword tmp64
          | _st_low rax
          | add tmp64, sizeof(uint32_t)
          | _toword tmp64
          | _st_hi rax
          | _call_cb DECODE_CB, DECODE_UD, f->name, SPROTO_TINTEGER, 0, NULL, TMP_U_P, size_u
          |
          |=>(maxpc-4):
          |
        }break;

        case SPROTO_TSTRING:
        case SPROTO_TSTRUCT:{
          | mov tmp64, currentdata 
          | _todword, tmp64
          | add currentdata, SIZEOF_LENGTH
          | mov r10, rax
          | _call_cb DECODE_CB, DECODE_UD, f->name, f->type, 0, f->st, currentdata, r10
          | test rax, rax
          | jnz =>(label_return_error)
          |
        }break;

        default:
          assert(0);
      }
    }

    | _next_tag
    |
    |=>(maxpc-1):  // next field
  }

  |
  |=>(label_return_error):
  | _return, -1
  |
  |=>(label_end):
  | _return, 0

  return 1;
}


|.type   ea_buffer, uint8_t, r15
|.define ea_index, rbp
|.define ea_size, tmp64
|.define sz_64,  r11
|.define sz,    r11d

static int 
_gen_encode_array(struct field* f, unsigned int label_return_error){
  | cmp ENCODE_SIZE, SIZEOF_LENGTH
  | jl =>(label_return_error)
  | mov ea_size, ENCODE_SIZE
  | sub ea_size, SIZEOF_LENGTH
  | mov ea_buffer, DATA
  | add ea_buffer, SIZEOF_LENGTH

  int type = f->type & ~SPROTO_TARRAY;
  switch(type){
    case SPROTO_TINTEGER:
        | _encode_integer_array ENCODE_CB, ENCODE_UD, f, ea_buffer, ea_size
        | mov ea_buffer, rax
        | test ea_buffer, ea_buffer
        | jz =>(label_return_error)
      break;

    case SPROTO_TBOOLEAN:{
        | mov ea_index, 1
        |1:
        | _call_cb ENCODE_CB, ENCODE_UD, f->name, type, ea_index, f->st, TMP_U_P, sizeof(uint32_t)
        | test eax, eax
        | js =>(label_return_error)
        | je >2
        | cmp ea_size, 1
        | jl =>(label_return_error)
        | mov al, 1
        | mov ea_buffer[0], al
        | _gt_u32 rax
        | test rax, rax
        | jnz >3
        | mov al, 0
        | mov ea_buffer[0], al 
        |3:
        | dec ea_size
        | inc ea_buffer
        | inc ea_index
        | jmp <1 
        |
        |2:
      }break;

    default:{
        | mov ea_index, 1
        |1:
        | cmp ea_size, SIZEOF_LENGTH
        | jl =>(label_return_error)
        | sub ea_size, SIZEOF_LENGTH
        | add ea_buffer, SIZEOF_LENGTH
        | _call_cb ENCODE_CB, ENCODE_UD, f->name, type, ea_index, f->st, ea_buffer, ea_size
        | mov r10d, eax
        | test r10d, r10d
        | js =>(label_return_error)
        | je >2
        | sub ea_buffer, SIZEOF_LENGTH
        | _fill_size ea_buffer, r10d, eax
        | add ea_buffer, SIZEOF_LENGTH
        | add ea_buffer, r10
        | sub ea_size, r10
        | inc ea_index
        | jmp <1
        |
        |2:
        | sub ea_buffer, SIZEOF_LENGTH
      }break;
  }

  | sub ea_buffer, DATA
  | sub ea_buffer, SIZEOF_LENGTH
  | test ea_buffer, ea_buffer
  | jz >1
  | _fill_size DATA, r15d, sz
  | jmp >2
  |1:
  | mov sz, 0
  |2:

  return 1;
}

static int 
_gen_encode_type(struct sproto_type* st){
  assert(SIZEOF_FIELD == 2);
  int header_sz = SIZEOF_HEADER + st->maxn * SIZEOF_FIELD;

  dasm_growpc(Dst, ++maxpc);
  unsigned int label_return_error = maxpc-1;

  | cmp ENCODE_SIZE, header_sz
  | jl =>(label_return_error)
  |
  | mov DATA, HEADER
  | add DATA, header_sz
  | sub ENCODE_SIZE, header_sz

  int size_u = sizeof(union tmp_u);
  assert(size_u == 8);


  int i;

  |.define index,   rbx
  |.define lasttag, r13
  | xor index, index
  | mov lasttag, -1

  for(i=0; i<st->n; i++){
    struct field *f = &st->f[i];
    int _tag = f->tag;
    int type = f->type;
    dasm_growpc(Dst, maxpc+=9);

    |.define datasz, r15 
    |.define tag,    r11
    |.define value, r12d
    |.define value64, r12

    | xor r11, r11
    | xor r12, r12
    | mov sz, -1
    | xor value, value

    if(type & SPROTO_TARRAY){
      int ret = _gen_encode_array(f, label_return_error);
      if(!ret) return ret;
    } else {
      switch(type){
        case SPROTO_TINTEGER:
        case SPROTO_TBOOLEAN:{
          | _call_cb ENCODE_CB, ENCODE_UD, f->name, type, 0, NULL, TMP_U_P, size_u
          | mov sz, eax
          | test sz, sz
          | js =>(label_return_error)
          | jz =>(maxpc-2)
          | cmp sz, sizeof(uint32_t)
          | jne =>(maxpc-3)
          |
            | _gt_u32 value
            | test value, value
            | js =>(maxpc-4)
            | inc value
            | sal value, 1
            | mov sz, 2
            | jmp =>(maxpc-5)
            | 
            |=>(maxpc-4):
            | _encode_integer value, DATA, ENCODE_SIZE, sz
            | xor value, value
            | jmp =>(maxpc-5)
          |
          |=>(maxpc-3):
          | cmp sz, sizeof(uint64_t)
          | jne =>(label_return_error)
          | _gt_u64, value64
          | _encode_uint64 value64, DATA, ENCODE_SIZE, sz
          | xor value64, value64
        }break;

        case SPROTO_TSTRING:{
          | _encode_buffer ENCODE_CB, ENCODE_UD, SPROTO_TSTRING, f->name, NULL, DATA, ENCODE_SIZE, sz
        }break;

        case SPROTO_TSTRUCT: {
          | _encode_buffer ENCODE_CB, ENCODE_UD, SPROTO_TSTRUCT, f->name, f->st, DATA, ENCODE_SIZE, sz
        }break;

        default:
          return 0;
      }
      |=>(maxpc-5): // switch end
    }
    
    | test sz, sz
    | js =>(label_return_error)
    | jz =>(maxpc-2)
    |
      | test value, value
      | jnz =>(maxpc-7)
      | add DATA, sz_64
      | sub ENCODE_SIZE, sz_64
      |=>(maxpc-7): 
      | mov RECORD, index
      | sal RECORD, 1  // for replace imul RECORD, SIZEOF_FIELD
      | add RECORD, SIZEOF_HEADER
      | add RECORD, HEADER
      | mov tag, _tag
      | sub tag, lasttag
      | sub tag, 1
      | cmp tag, 0
      | jle =>(maxpc-6)
      |
        | dec tag
        | sal tag, 1
        | inc tag
        | cmp tag, 0xffff
        | jle =>(maxpc-8)
          | jmp =>(label_return_error)
        |=>(maxpc-8):
        | mov rax, tag
        | mov RECORD[0], al
        | shr rax, 8
        | mov RECORD[1], al
        | inc index
        | add RECORD, SIZEOF_FIELD
      |
      |=>(maxpc-6):
      | inc index
      | mov eax, value
      | mov RECORD[0], al
      | shr eax, 8  
      | mov RECORD[1], al
      | mov lasttag, _tag
    | 
    |=>(maxpc-2): // for next
  }
  | mov rax, index
  | mov HEADER[0], al
  | shr rax, 8
  | mov HEADER[1], al
  |
  | mov datasz, DATA
  | sub datasz, HEADER
  | sub datasz, header_sz
  | mov DATA, HEADER

  | add DATA, header_sz
  |
  | mov rcx, index
  | sal index, 1 // for replace  imul index, SIZEOF_FIELD
  | cmp rcx, st->maxn
  | je =>(maxpc-9)
  |
    |
    | add HEADER, SIZEOF_HEADER
    | add HEADER, index
    | mov rdi, HEADER
    | mov rsi, DATA
    | mov rdx, datasz
    | mov64 rax, (uintptr_t)memmove
    | call rax
  |
  |=>(maxpc-9):
  | add datasz, index
  | add datasz, SIZEOF_HEADER
  | _return, datasz
  |
  |=>(label_return_error):
  | _return, -1

  return 1;
}

static void* 
_gen_decode(struct sproto_type* st){
  _new_env(Dst, actions);

  | _pre
  || int success = _gen_decode_type(st);
  |
  | _ret
  
  void* ret = (success)?(_jitcode_new(Dst)):(NULL);  
  _free_env(Dst);
  return ret;
}

static void* 
_gen_encode(struct sproto_type* st){
  _new_env(Dst, actions);

  | _pre
  || int success =  _gen_encode_type(st);
  |
  | _ret

  void* ret = (success)?(_jitcode_new(Dst)):(NULL);
  _free_env(Dst);
  return ret;
}
