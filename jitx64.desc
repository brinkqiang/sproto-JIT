// the test hello world JIT FOR X64

|.arch x64
|.actionlist actions

|.globals SPROTO_CODE_
static void* labels[SPROTO_CODE__MAX];

// call a function with a arg
|.macro callp, addr
| mov64  rax, (uintptr_t)addr
| call   rax
|.endmacro


|.macro print_func, str
| mov64 rdi, (uintptr_t)str
| callp printf
|.endmacro


// jit argument register

|.define ST, rdi
|.define DECODE_DATA, rsi
|.define DECODE_SIZE, rdx
|.define DECODE_CB,   rcx
|.define DECODE_UD,   r8

|.define ENCODE_DATA, rsi
|.define ENCODE_SIZE, rdx
|.define ENCODE_CB,   rcx
|.define ENCODE_UD,   r8

|.macro _pre
| push rbp
| push rdi
| push rsi
| push rdx
| push rcx
| push r8
| push r9
| push r10
| push r11
| push r12
| push r13
| push r14
| push r15
| mov rbp, rsp
|.endmacro

|.macro _ret
|->run_done:
| pop r15
| pop r14
| pop r13
| pop r12
| pop r11
| pop r10
| pop r9
| pop r8
| pop rcx
| pop rdx
| pop rsi
| pop rdi
| pop rbp
| ret
|.endmacro


|.macro _return, value
| mov rax, value
| jmp ->run_done 
|.endmacro


|.macro _set_imm_value, value
| mov64 r9, (uintptr_t)value
|.endmacro

|.macro _set_rg_value, value
| mov r9, value
|.endmacro

// argement rdi, rsi, rdx, rcx, r8, r9, rax
// R_OUT_RET is return value
|.macro _call_cb, R_cb, ud, tagname, type, index, st, value, _set_value, length, R_OUT_RET
| push rdi
| push rsi
| push rdx
| push rcx
| push r8 
| push r9
|
| mov rax, R_cb
| mov rdi, ud
| mov64 rsi, (uintptr_t)tagname
| mov64 r8, (uintptr_t)st
| _set_value value
| push length
| mov rdx, type
| mov rcx, index
| call rax
| mov R_OUT_RET, eax
|
| add rsp, 8 // pop length
| pop r9
| pop r8
| pop rcx
| pop rdx
| pop rsi
| pop rdi
|.endmacro

|.type HEADER, uint8_t,   DECODE_DATA
|.type DATA,   uint8_t,   r14
|.type RECORD, uint8_t,   r15

|.macro _encode_uint64, u64, data, size, R_out
|
| int3 // todo it!!
|.endmacro

|.macro _fill_size, data, sz, R_out
| mov eax, sz
| cmp eax, 0
| jl <4
| je <5
| mov eax, sz
| mov data[0], al
| shr eax, 8
| mov data[1], al
| shr eax, 8
| mov data[2], al
| shr eax, 8
| mov data[3], al
| mov R_out, sz
| add R_out, SIZEOF_LENGTH
| jmp >3
|
|5:
| mov R_out, 0
| jmp >3
|4:
| mov R_out, -1
|3:
|.endmacro

|.macro _encode_integer, u32, data, size, R_out
| cmp size, SIZEOF_LENGTH + sizeof(uint32_t)
| jl >1 
| mov eax, u32
| mov data[4], al
| shr eax, 8
| mov data[5], al
| shr eax, 8
| mov data[6], al
| shr eax, 8
| mov data[7], al
| _fill_size data, sizeof(uint32_t), R_out
| jmp >2
|
|1:
| mov R_out, -1
|2:
|.endmacro


|.macro _encode_string, cb, ud, f, data, size, R_out
| cmp size, SIZEOF_LENGTH
| jl >1
| add data, SIZEOF_LENGTH
| sub size, SIZEOF_LENGTH
| _call_cb cb, ud, f->name, SPROTO_TSTRING, 0, NULL,  data, _set_rg_value, size, R_out
| sub data, SIZEOF_LENGTH
| add size, SIZEOF_LENGTH
| _fill_size data, R_out, R_out
| jmp >2
| 
|1:
| mov R_out, -1
|2:
|.endmacro

/*
static int 
_test_cb(void* ud, const char* tagname, int type, int index, struct sproto_type* st, void* value, int length) {
  printf("ud = %p tagname = %s type = %d index = %d, st = %p, value = %p length = %d\n",
    ud, tagname, type, index, st, value, length);  

  return 1;
}
*/

static int _test_encode_type(struct sproto_type* st){
  | mov al, 0x01
  | mov HEADER[0], al
  | mov al, 0x00
  | mov HEADER[1], al
  | mov al, 0x24
  | mov HEADER[2], al
  | mov al, 0x00
  | mov HEADER[3], al
  | _return, 4
  return 1;
}

static int _gen_decode_type(struct sproto_type* st){
  return 0;
}


static int _gen_encode_type(struct sproto_type* st){
  assert(SIZEOF_FIELD == 2);
  int header_sz = SIZEOF_HEADER + st->maxn * SIZEOF_FIELD;

  dasm_growpc(Dst, ++maxpc);
  unsigned int label_return_error = maxpc-1;

  | cmp ENCODE_SIZE, header_sz
  | jl =>(label_return_error)
  |
  | mov DATA, HEADER
  | add DATA, header_sz
  | sub ENCODE_SIZE, header_sz

  void* tmp_u = &(jit_instance.tmp_u);
  int size_u = sizeof(jit_instance.tmp_u);

  |.type JIT_P, struct sproto_jit, rax
  |.macro _gt_u32, R_out
  | mov64 JIT_P, (uintptr_t)&(jit_instance) 
  | mov R_out, JIT_P->tmp_u.u32
  |.endmacro

  |.macro _gt_u64, R_out
  | mov64 JIT_P, (uintptr_t)&(jit_instance)
  | mov64 R_out, JIT_P->tmp_u.u64
  |.endmacro
  
  int i;

  |.define index,   r10
  |.define lasttag, r13
  | xor index, index
  | mov lasttag, -1

  for(i=0; i<st->n; i++){
    struct field *f = &st->f[i];
    int _tag = f->tag;
    int type = f->type;
    dasm_growpc(Dst, maxpc+=9);

    |.define datasz, r15 
    |.define tag,    r11
    |.define sz_64,  r11
    |.define sz,    r11d
    |.define value, r12d
    | xor r11, r11
    | xor r12, r12
    | mov sz, -1
    | xor value, value

    if(type & SPROTO_TARRAY){
      printf("array TODO IT!!\n");
      assert(0);
    } else {
      switch(type){
        case SPROTO_TINTEGER:
        case SPROTO_TBOOLEAN:{
          | _call_cb ENCODE_CB, ENCODE_UD, f->name, type, 0, NULL, tmp_u, _set_imm_value, size_u, sz
          | cmp sz, 0
          | jl =>(label_return_error)
          | je =>(maxpc-2)
          | cmp sz, sizeof(uint32_t)
          | jne =>(maxpc-3)
          |
            | _gt_u32 value
            | cmp value, 0x7fff
            | jnl =>(maxpc-4)
            | inc value
            | sal value, 1
            | mov sz, 2
            | jmp =>(maxpc-5)
            | 
            |=>(maxpc-4):
            | _gt_u32 r2d
            | _encode_integer r2d, DATA, ENCODE_SIZE, sz
            | jmp =>(maxpc-5)
          |
          |=>(maxpc-3):
          | cmp sz, sizeof(uint64_t)
          | jne =>(label_return_error)
          | _encode_uint64 r2, DATA, ENCODE_SIZE, sz
        }break;

        case SPROTO_TSTRING:{
          | _encode_string ENCODE_CB, ENCODE_UD, f, DATA, ENCODE_SIZE, sz
        }break;

        case SPROTO_TSTRUCT: {
          printf("struct TODO IT!!\n");
          assert(0);
        }break;

        default:
          return 0;
      }
      |=>(maxpc-5): // switch end
    }
    
    | cmp sz, 0
    | jl =>(label_return_error)
    | je =>(maxpc-2)
    |
      | cmp value, 0
      | jne =>(maxpc-7)
      | add DATA, sz_64
      | sub ENCODE_SIZE, sz_64
      |=>(maxpc-7): 
      | mov RECORD, index
      | sal RECORD, 1  // for replace imul RECORD, SIZEOF_FIELD
      | add RECORD, SIZEOF_HEADER
      | add RECORD, HEADER
      | mov tag, _tag
      | sub tag, lasttag
      | sub tag, 1
      | cmp tag, 0
      | jle =>(maxpc-6)
      |
        | dec tag
        | sal tag, 1
        | inc tag
        | cmp tag, 0xffff
        | jle =>(maxpc-8)
          | jmp =>(label_return_error)
        |=>(maxpc-8):
        | mov rax, tag
        | mov RECORD[0], al
        | shr rax, 8
        | mov RECORD[1], al
        | inc index
        | add RECORD, SIZEOF_FIELD
      |
      |=>(maxpc-6):
      | inc index
      | mov eax, value
      | mov RECORD[0], al
      | shr eax, 8  
      | mov RECORD[1], al
      | mov lasttag, _tag
    | 
    |=>(maxpc-2): // for next
  }
  //| int3
  | mov rax, index
  | mov HEADER[0], al
  | shr rax, 8
  | mov HEADER[1], al
  |
  | mov datasz, DATA
  | sub datasz, HEADER
  | sub datasz, header_sz
  | mov DATA, HEADER

  | add DATA, header_sz
  |
  | mov rcx, index
  | sal index, 1 // for replace  imul index, SIZEOF_FIELD
  | cmp rcx, st->maxn
  | je =>(maxpc-9)
  |
    |
    | add HEADER, SIZEOF_HEADER
    | add HEADER, index
    | mov rdi, HEADER
    | mov rsi, DATA
    | mov rdx, datasz
    | mov64 rax, (uintptr_t)memmove
    | call rax
  |
  |=>(maxpc-9):
  | add datasz, index
  | add datasz, SIZEOF_HEADER
  | _return, datasz
  |
  |=>(label_return_error):
  | _return, -1

  return 1;
}

static void* _gen_decode(struct sproto_type* st){
  _new_env(Dst, actions);

  | _pre
  || int success = _gen_decode_type(st);
  |
  | ret
  
  void* ret = (success)?(_jitcode_new(Dst)):(NULL);  
  _free_env(Dst);
  return ret;
}

static void* _gen_encode(struct sproto_type* st){
  _new_env(Dst, actions);

  | _pre
  || int success =  _gen_encode_type(st);
  |
  | _ret

  void* ret = (success)?(_jitcode_new(Dst)):(NULL);
  _free_env(Dst);
  return ret;
}


static void* _gen_decode(struct sproto_type* st){
  return NULL;
}



// for test

void* _gen_jit(const char* str, uint8_t* tmp_data){
  // prepare state
  _new_env(Dst, actions);
  //dasm_growpc(Dst, 8);
   int a =1;

  |.type out, uint8_t, r15

  | mov rax, a
  | push rbp
  | push rax
  | push rdi
  | push r15
  | mov rbp, rsp
  |
  | mov eax, 0x01020304
  | mov64 out, (uintptr_t)tmp_data
  | mov out[0], al
  | shr eax, 8
  | mov out[1], al
  | shr eax, 8
  | mov out[2], al
  | shr eax, 8
  | mov out[3], al
  |
  | pop r15
  | pop rdi
  | pop rax
  | pop rbp
  | ret

  void* ret = _jitcode_new(Dst);
  _free_env(Dst);
  return ret;
}



